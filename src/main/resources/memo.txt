Spring batch Architecture
 - Spring batch 는 Job 타입의 Bean 이 생성되면, JobLauncher 에 의해 Job 을 실행한다.

    JobLauncher -- 실행 --> Job -- 실행 --> Step
        : JobLauncher 가 Job 을 실행하고, Job 이 Step 을 실행하게 된다.

 - JobRepository
    : DB 또는 Memory 에 Spring batch 가 실행될 수 있도록 batch 의 meta 데이터를 관리하는 Class
    : Spring batch 의 전반적인 데이터를 관리하는 Class

 - Job 은 JobLauncher 에 의해 실행
 - Job 은 Batch 의 실행 단위를 의미
 - Job 은 N 개의 Step을 실행할 수 있으며, 흐름(Flow)을 관리할 수 있다.
    - 예를 들면, A Step 실행 후 조건에 따라 B Step 또는 C Step 실행 설정


 - Step은 Job 의 세부 실행 단위 이며, N 개가 등록돼 실행된다.
 - Step 의 실행 단위는 크게 2 가지로 나눌 수 있다.
    1. Chunk 기반 : 하나의 큰 덩어리를 n 개씩 나눠서 실행
    2. Task 기반: 하나의 작업 기반으로 실행

 - Chunk 기반 Step 은 ItemReader, ItemProcessor, ItemWriter 가 있다.
    - 여기서 Item 은 Batch 처리 대상 객체를 의미한다.

 - ItemReader 는 Batch 처리 대상 객체를 읽어 ItemProcessor 또는 ItemWriter 에게 전달한다.
    - 예를 들면, 파일 또는 DB 에서 데이터를 읽는다.

 - ItemProcessor 는 Input 객체를 output 객체로 filtering 또는 processing 해 ItemWriter 에게 전달한다.
    - 예를 들면, ItemReader 에서 읽은 데이터를 수정 또는 ItemWriter 대상인지 filtering 한다.
    - ItemProcessor 는 optional 하다.
    - ItemProcessor 가 하는 일을 ItemReader 또는 ItemWriter 가 대신 할 수 있다.

 - ItemWriter 는 batch 처리 대상 객체를 처리한다.
    - 예를 들면 , DB update 를 하거나, 처리 대상 사용자에게 알림을 보낸다.


[ Spring batch 테이블 구조와 이해 ]
- batch 실행을 위한 meta 데이터가 저장되는 테이블
 - BATCH_JOB_INSTANCE
    - Job 이 실행되며 생성되는 최상위 계층의 테이블
    - job_name 과 job_key 를 기준으로 하나의 row가 생성되며, 같은 job_name 과 job_key 가 저장될 수 없다.
    - job_key 는 BATCH_JOB_EXECUTION_PARAMS 에 저장되는 Parameter 를 나열해 암호화하여 저장한다.

 - BATCH_JOB_EXECUTION
    - job 이 실행되는 동안 시작/종료 시간, job 상태 등을 관리
    - Job 이 실행되는 시점에 생성된다.
    - 1개의 BATCH_JOB_INSTANCE 는 N 개의 BATCH_JOB_EXECUTION 를 포함한다.

 - BATCH_JOB_EXECUTION_PARAMS
    - Job 을 실행하기 위해 주입된 parameter 정보 저장

 - BATCH_JOB_EXECUTION_CONTEXT
    - Job 이 실행되며 공유해야 할 데이터를 직렬화해 저장

 - BATCH_STEP_EXECUTION
    - Step 이 실행되는 동안 필요한 데이터 또는 실행된 결과 저장

 - BATCH_STEP_EXECUTION_CONTEXT
    - Step 이 실행되며 공유해야 할 데이터를 직렬화해 저장

 - spring-batch-core/org.springframework/batch/core/* 에 위치
 - Spring batch 를 실행하고 관리하기 위한 테이블
 - schema.sql 설정
    - schema-**.sql 의 실행 구분은
        - DB 종류별로 script 가 구분
    - spring.vatch.initialize config 로 구분한다.
    - ALWAYS, EMBEDDED, NEVER 로 구분한다.
        - ALWAYS : 항상 실행
        - EMBEDDED : 내장 DB 일 때만 실행
        - NEVER : 항상 실행 안함

    - 기본 값은 EMBEDDED 다.


[ Job, JobInstance, JobExecution, Step, StepExecution 이해 ]
 ** JobInstance : BATCH_JOB_INSTANCE 테이블과 매핑
 ** JobExecution : BATCH_JOB_EXECUTION 테이블과 매핑
 ** JobParameters : BATCH_JOB_EXECUTION_PARAMS 테이블과 매핑
 ** ExecutionContext : BATCH_JOB_EXECUTION_CONTEXT 테이블과 매핑

 - JobInstance 의 생성 기준은 JobParameters 중복 여부에 따라 생성
 - 다른 parameter 로 Job 이 생성되면, JobInstance 가 생성된다.
 - 같은 parameter 로 Job 이 실행되면, 이미 생성된 JobInstance 가 실행된다.
 - JobExecution 은 항상 새롭게 생성 된다.
 - 예를 들어,
    - 처음 Job 실행 시 date parameter 가 1월1일로 실행됐다면, 1번 JobInstance 생성
    - 다음 Job 실행 시 date parameter 가 1월2일로 실행됐다면, 2번 JobInstance 생성
    - 다음 Job 실행 시 date parameter 가 1월2일로 실행됐다면, 2번 JobInstance 재실행
        - 이 때, Job 이 재실행 대상이 아닌 경우 에러가 발생

 - Job 을 항상 새로운 JobInstanc e가 실행될 수 있도록 RunIdIncrementer 제공
    - RunIdIncrementer 는 항상 다른 run.id를 Parameter 로 설정


 ** StepExecution : BATCH_STEP_EXECUTION 테이블과 매핑
 ** ExecutionContext : BATCH_STEP_EXECUTION_CONTEXT 테이블과 매핑

 - ExecutionContext Class 는 job 과 step 의 context 를 관리하고 모두 매핑할 수 있는 Class


[ 데이터 공유 ExecutionContext 이해 ]


[ Task 기반 배치와 Chunk 기반 배치]
 - batch 를 처리할 수 있는 방법은 크게 2가지
 - Tasklet을 사용한 Task 기반 처리
    - 배치 처리 과정이 비교적 쉬운 경우 쉽게 사용
    - 대량 처리를 하는 경우 더 복잡
    - 하나의 큰 덩어리를 여러 덩어리로 나누어 처리하기 부적합

 - Chunk를 사용한 chunk(덩어리) 기반 처리
    - ItemReader, ItemProcessor, ItemWriter 의 관계 이해 필요
    - 대량 처리를 하는 경우 Tasklet 보다 비교적 쉽게 구현
    - 예를 들어 10,000개의 데이터 중 1,000개씩 10개의 덩어리로 수행
        - 이를 Tasklet 으로 처리하면 10,000개를 한번에 처리하거나 수동으로 1,000개씩 분할

 - 예제 참고


































































































